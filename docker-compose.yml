version: "3.9"

services:

  snapshot-init:
    profiles: ["snapshot-init"]
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: 0efa50283bb7cd77f10a9ad8066f9e782a1de067
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./stacks-krypton-miner.toml/:/root/config.toml.in
      - ./init-data:/init-data
      - stacks-data:/stacks-blockchain-data
      - bitcoind:/bitcoin-data
    environment:
      DATA_DIR: /stacks-blockchain-data
      BITCOIN_PEER_HOST: localhost
      BITCOIN_PEER_PORT: $BITCOIN_PEER_PORT
      BITCOIN_RPC_PORT: $BITCOIN_RPC_PORT
      BITCOIN_RPC_USER: $BITCOIN_RPC_USER
      BITCOIN_RPC_PASS: $BITCOIN_RPC_PASS
      MINER_SEED: $MINER_SEED
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        rm -rf /bitcoin-data/*
        bitcoind &
        BTCD_PID=$$!
        bitcoin-cli -rpcwait getmininginfo
        bitcoin-cli importaddress $BTC_ADDR "" false
        bitcoin-cli generatetoaddress $INIT_BLOCKS $BTC_ADDR

        rm -rf /stacks-blockchain-data/*
        envsubst < config.toml.in > config.toml
        stacks-node start --config=config.toml &
        STACKS_PID=$$!

        while true; do
          HEIGHT=$$(curl -s localhost:20443/v2/info | jq '.burn_block_height')
          if [ "$$HEIGHT" = "$INIT_BLOCKS" ]; then
            echo "Stacks node caught up to block $INIT_BLOCKS"
            break
          else
            echo "Stacks node not ready, at block: $$HEIGHT"
          fi
          sleep 0.5s
        done

        kill $$STACKS_PID
        wait $$STACKS_PID

        bitcoin-cli stop
        wait $$BTCD_PID

        tar -C /bitcoin-data -czf /init-data/bitcoind.tar.gz ./
        tar -C /stacks-blockchain-data -czf /init-data/stacks-blockchain-data.tar.gz ./

  bitcoind:
    profiles: ["default", "bitcoind-only"]
    build:
      context: .
      dockerfile: Dockerfile.btc
    ports:
      - "18443:18443"
      - "18444:18444"
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data:/init-data
      - bitcoind:/bitcoin-data
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        rm -rf /bitcoin-data/*
        tar -xf /init-data/bitcoind.tar.gz -C /bitcoin-data
        bitcoind
    healthcheck:
      test: bitcoin-cli -rpcwait getmininginfo
      interval: 100ms
      timeout: 30s

  bitcoind-miner:
    profiles: ["default"]
    build:
      context: .
      dockerfile: Dockerfile.btc
    volumes:
      - ./bitcoind-miner.sh:/usr/bin/bitcoind-miner.sh
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - bitcoind:/bitcoin-data
    depends_on:
      bitcoind:
        condition: service_healthy
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        bitcoin-cli -rpcconnect=bitcoind generatetoaddress 1 $BTC_ADDR
        while true; do
          TX=$$(bitcoin-cli -rpcconnect=bitcoind listtransactions '*' 1 0 true)
          CONFS=$$(echo "$$TX" | jq '.[].confirmations')
          if [ "$$CONFS" = "0" ]; then
            echo "Detected Stacks mining mempool tx, mining btc block..."
            bitcoin-cli -rpcconnect=bitcoind generatetoaddress 1 "$BTC_ADDR"
          else
            echo "No Stacks mining tx detected"
          fi
          sleep $MINE_INTERVAL
        done

  stacks-node:
    profiles: ["default"]
    build:
      context: .
      dockerfile: Dockerfile.stacks-node
      args:
        GIT_COMMIT: 0efa50283bb7cd77f10a9ad8066f9e782a1de067
    ports:
      - "20443:20443"
    volumes:
      - ./stacks-krypton-miner.toml/:/root/config.toml.in
      - ./init-data:/init-data
      - stacks-data:/stacks-blockchain-data
    depends_on:
      bitcoind-miner:
        condition: service_started
    environment:
      # STACKS_LOG_TRACE: 1 # uncomment for trace logging
      # STACKS_LOG_DEBUG: 1
      DATA_DIR: /stacks-blockchain-data
      STACKS_EVENT_OBSERVER: stacks-api:3700
      BITCOIN_PEER_HOST: bitcoind
      BITCOIN_PEER_PORT: $BITCOIN_PEER_PORT
      BITCOIN_RPC_PORT: $BITCOIN_RPC_PORT
      BITCOIN_RPC_USER: $BITCOIN_RPC_USER
      BITCOIN_RPC_PASS: $BITCOIN_RPC_PASS
      MINER_SEED: $MINER_SEED
    # healthcheck:
    #   test: curl --fail-with-body "http://localhost:20443/v2/info" || exit 1
    #   timeout: 60s
    #   interval: 300ms
    #   retries: 1000000
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        rm -rf /stacks-blockchain-data/*
        tar -xf /init-data/stacks-blockchain-data.tar.gz -C /stacks-blockchain-data
        envsubst < config.toml.in > config.toml
        exec stacks-node start --config=config.toml

  postgres:
    profiles: ["default"]
    image: "postgres:14"
    ports:
      - "5490:5490"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stacks_blockchain_api
      PGPORT: 5490

  stacks-api:
    profiles: ["default"]
    build:
      context: .
      dockerfile: Dockerfile.stacks-api
      args:
        GIT_COMMIT: 97fbbd7fd7e42ed185b03246191d63d80d2dae9b
    ports:
      - "3999:3999"
    expose:
      - "3700"
    environment:
      NODE_ENVIRONMENT: production
      STACKS_API_LOG_LEVEL: debug
      STACKS_CHAIN_ID: "0x80000000"
      STACKS_BLOCKCHAIN_API_HOST: "0.0.0.0"
      STACKS_BLOCKCHAIN_API_PORT: 3999
      STACKS_CORE_EVENT_HOST: "0.0.0.0"
      STACKS_CORE_EVENT_PORT: 3700
      PG_HOST: postgres
      PG_PORT: 5490
      PG_USER: postgres
      PG_PASSWORD: postgres
      PG_DATABASE: stacks_blockchain_api
      PG_SCHEMA: public
      STACKS_CORE_RPC_HOST: stacks-node
      STACKS_CORE_RPC_PORT: 20443
      BTC_RPC_HOST: http://bitcoind
      BTC_RPC_PORT: 18443
      BTC_RPC_USER: krypton
      BTC_RPC_PW: krypton
      BTC_FAUCET_PK: 9e446f6b0c6a96cf2190e54bcd5a8569c3e386f091605499464389b8d4e0bfc201

volumes:
  pgdata:
  bitcoind:
  stacks-data:
